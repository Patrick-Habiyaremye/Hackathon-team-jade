// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      Role     @default(MENTEE)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Admin specific
  isAdmin Boolean @default(false)
  adminVerifiedAt DateTime?

  // Mentor specific
  mentorProfile MentorProfile?
  mentorApplications MentorApplication[]
  receivedRequests MentorRequest[] @relation("MentorRequests")

  // Mentee specific
  menteeProfile MenteeProfile?
  sentRequests MentorRequest[] @relation("MenteeRequests")

  // Notifications
  notifications Notification[]

  @@map("users")
}

enum Role {
  ADMIN
  MENTOR
  MENTEE
}

model MentorProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio          String
  expertise    String   // store as comma-separated string
  languages    String   // store as comma-separated string
  availability String
  photo        String?
  experience   String
  education    String
  location     String
  isApproved   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("mentor_profiles")
}

model MenteeProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio       String
  goals     String   // store as comma-separated string
  interests String   // store as comma-separated string
  location  String
  education String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("mentee_profiles")
}

model MentorApplication {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  status    ApplicationStatus @default(PENDING)
  reviewedAt DateTime?
  reviewedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("mentor_applications")
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model MentorRequest {
  id        String   @id @default(cuid())
  menteeId  String
  mentorId  String
  mentee    User     @relation("MenteeRequests", fields: [menteeId], references: [id], onDelete: Cascade)
  mentor    User     @relation("MentorRequests", fields: [mentorId], references: [id], onDelete: Cascade)
  message   String
  status    RequestStatus @default(PENDING)
  response  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("mentor_requests")
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  message   String
  type      NotificationType
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("notifications")
}

enum NotificationType {
  MENTOR_APPROVED
  MENTOR_REJECTED
  REQUEST_SENT
  REQUEST_ACCEPTED
  REQUEST_REJECTED
  MENTOR_REQUEST
  GENERAL
}